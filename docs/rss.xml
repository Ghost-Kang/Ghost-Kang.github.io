<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://Ghost-Kang.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Ghost-Kang.github.io</link></image><lastBuildDate>Tue, 28 May 2024 16:14:02 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Linux 文件处理三剑客 grep sed awk</title><link>https://Ghost-Kang.github.io/post/Linux%20-wen-jian-chu-li-san-jian-ke-%20grep%20sed%20awk.html</link><description>grep（global regular expression print）&#13;
&#13;
能够在一个或者多个文件中，搜索某一个特定模式（正则表达式），此模式可以是单一的字符，字符串，单词和句子&#13;
&#13;
正则表达式：描述一组字符串的一个模式，regular expression 模仿了数学表达式，通过使用操作符将最小的表达式组合成了一个新的表达式，正则表达式通配符：：&#13;
&#13;
c* 匹配0个或者多个c的字符串&#13;
. 将匹配任何一个字符，且只能是一个字符&#13;
[XYZ] 匹配方括号中的任何一个字符&#13;
[^xyz] 匹配除括号中的字符串外的所有字符串&#13;
^ 锁定行的开头&#13;
$锁定行的结尾&#13;
&#13;
grep命令格式&#13;
grep 【选项】 模式 文件名字&#13;
模式范围是字符串 或者正则表达式&#13;
&#13;
选项： -c 列出包含模式的行数， -i忽略大小写  -l带有匹配行的文件名， -n 每一行前面的行号  -v 列出没有匹配模式的行  -w&#13;
&#13;
sed:  vim采用交互式文本编辑器， sed是采用流编辑模式，明显的特征是 sed处理数据前，需要提前提供一组规则，sed按照此规则来编辑数据&#13;
&#13;
sed根据脚本命令来处理文本文件中的数据，执行顺序：&#13;
1.每次仅读取一行内容&#13;
2.根据提供的规则命令匹配并修改数据 。</description><guid isPermaLink="true">https://Ghost-Kang.github.io/post/Linux%20-wen-jian-chu-li-san-jian-ke-%20grep%20sed%20awk.html</guid><pubDate>Fri, 12 Apr 2024 07:01:16 +0000</pubDate></item><item><title>linux  cut 命令</title><link>https://Ghost-Kang.github.io/post/linux%20%20cut%20-ming-ling.html</link><description>cut命令：从一个文本文件或者文本流中提取文本列&#13;
&#13;
cut -b list -[n] [file ...]&#13;
cut -c list [file ....]&#13;
cut -f list [-d delimiter] [-s] [file ...]&#13;
&#13;
-b -c -f 分布表示 字节，字符，字段（byte， character， field）&#13;
list表示操作的范围， -你表示具体数字&#13;
file表示操作文件名字&#13;
delimiter 表示分隔符，默认情况下为TAB；&#13;
-s表示不包含哪些不含分隔符的行（有利于去掉注释和标题）&#13;
范围表示方法：N 只有第N项， N-从第N一直到行尾； N-M从N项到M项  -M 从第一个行开始到第M项  - 从1行开始到结束的所有项&#13;
&#13;
例子：&#13;
&#13;
1. grep '[[:digit:]]:' /proc/interrupts | cut -c 1-15&#13;
&#13;
&#13;
2. grep '[[:digit:]]:' /proc/interrupts | cut -c 1-4, 34-&#13;
&#13;
&#13;
3. cut -f1 -d ':' /etc/passwd | head -15   //  cut -d ':' -f1  /etc/passwd | head -15&#13;
&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Ghost-Kang.github.io/post/linux%20%20cut%20-ming-ling.html</guid><pubDate>Thu, 11 Apr 2024 06:42:39 +0000</pubDate></item><item><title>Shell 2&gt;&amp;1</title><link>https://Ghost-Kang.github.io/post/Shell%202-%261.html</link><description>linux系统下文件描述符（file descriptor）表示数据流&#13;
0：stdin 标准输入&#13;
1：stdout 标准输出&#13;
2: stderr 标准错误输出&#13;
3：other file&#13;
&#13;
&gt;是重定向符号&#13;
&amp;类似引用地址的意思&#13;
&#13;
&gt;&amp;是一个整体，不可以分开，分开就没有上述的意思&#13;
&#13;
2&gt;&amp;1 的意思是：将标准错误的信息，发送到标准的输出中&#13;
&#13;
标准输入  0     &lt;或 &lt;&lt; 或 &lt;&lt;&lt;     /dev/stdin -&gt; /proc/self/fd/0 -&gt; /dev/pts/0&#13;
标准输出 1     &gt;，&gt;&gt;, 1&gt;或 1&gt;&gt;  /dev/stdout -&gt; /proc/self/fd/1 -&gt; /dev/pts/0&#13;
标准错误  2   2&gt; 或 2&gt;&gt;      /dev/stderr -&gt; /proc/self/fd/2 -&gt; /dev/pts/0&#13;
&#13;
标准输出：&#13;
go run my.go &gt; twz.log&#13;
gor urn my.go 1&gt; twz.log&#13;
错误输出：&#13;
go run my.go  2&gt;twz.log&#13;
&#13;
标准和错误一起输出到文件&#13;
go run my.go &gt;twz.log 2&gt;&amp;1&#13;
go run my.go &amp;&gt;twz.log&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Ghost-Kang.github.io/post/Shell%202-%261.html</guid><pubDate>Wed, 10 Apr 2024 02:47:10 +0000</pubDate></item><item><title> 底层传输加密协议：Xray   sing-box naiveproxy</title><link>https://Ghost-Kang.github.io/post/%20-di-ceng-chuan-shu-jia-mi-xie-yi-%EF%BC%9AXray%20%20%20sing-box%20naiveproxy.html</link><description>核心：&#13;
Xray-core &#13;
sing-box: 基于sagernet开发的通用代理平台&#13;
&#13;
协议组合： &#13;
vless（reality，Vision，TCP，WS，gRPC）&#13;
VMess（ TCP, WS） websocket&#13;
Trojan（TCP, gRPC）&#13;
Hysteria（sing-box）：基于 QUIC 的 TCP 和 UDP 代理，专为速度、安全性和抗审查性而设计；基于QUIC协议，卖点是Brutal，一种拥塞控制算法，可以通过用户手动制定所需速率来抵抗丢包&#13;
Tuic（sing-box）: 最近流行的一个基于QUIC的国产简单协议，卖点是BBR拥塞控制算法&#13;
NaiveProxy（sing-box）：[Browser → Naïve client] ⟶ Censor ⟶ [Frontend → Naïve server] ⟶ Internet；NaïveProxy 使用 Chromium 的网络堆栈来模拟常规 Chrome 浏览器和标准前端服务器之间的流量；&#13;
&#13;
客户端：&#13;
window: v2rayN&#13;
android: NekoBox for Android , v2ryaNG&#13;
linux: NekoRay/NeroBox for PC&#13;
IOS： showrocket/ Yet Another Shadow Socket&#13;
MAC：Clash/Yet Another Shadow Socket/v2rayU&#13;
&#13;
;mac/windows:Furious ; Android: NekoBoxForAndroid ; IOS:Streisand &#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://Ghost-Kang.github.io/post/%20-di-ceng-chuan-shu-jia-mi-xie-yi-%EF%BC%9AXray%20%20%20sing-box%20naiveproxy.html</guid><pubDate>Mon, 08 Apr 2024 11:43:46 +0000</pubDate></item><item><title>系统代理：直连模式，PAC模式，全局代理</title><link>https://Ghost-Kang.github.io/post/xi-tong-dai-li-%EF%BC%9A-zhi-lian-mo-shi-%EF%BC%8CPAC-mo-shi-%EF%BC%8C-quan-ju-dai-li.html</link><description>系统代理模式：&#13;
在系统设置里面设置了一个代理服务器，让软件可以直接跳到用系统代理设置中直接连接代理服务器，而不需要单独设置&#13;
所有的软件都知道系统内有一个代理服务器可以链接，只要跟随系统代理设置就可以连接，无需额外的配置&#13;
一般只有浏览器会自动的调用系统代理进行连接，其他大部分应用不会自己启动系统代理连接，需要手动在软件内设置&#13;
&#13;
系统代理分为三种模式：直连模式，PAC模式，全局代理&#13;
&#13;
直连模式：在系统代理设置中关闭代理，使启动了系统代理的软件直接连接网络（一般是浏览器），但是 并没有关闭本地构建的代理服务器，手动配置的代理服务的软件还可以运行&#13;
&#13;
PAC模式(proxy-auto-config)代理自动配置，是网页浏览器技术，定义浏览器如何自动的选择适当的代理服务器来访问一个网页&#13;
PCA文件包含一个jiavascript函数，“FindProxyForURL（url，host）”这个函数返回一个或者多个访问规则字符串，用户根据代理规则选择访问网站是否经过代理。</description><guid isPermaLink="true">https://Ghost-Kang.github.io/post/xi-tong-dai-li-%EF%BC%9A-zhi-lian-mo-shi-%EF%BC%8CPAC-mo-shi-%EF%BC%8C-quan-ju-dai-li.html</guid><pubDate>Sun, 07 Apr 2024 02:42:45 +0000</pubDate></item></channel></rss>